功能概述
用户输入助手，由客户端输入关键词，发送到服务器，服务器接到查询请求，将其加入任务队列，然后由线程池将搜索的任务分配给工作线程，该工作线程先在任务所在线程的cache里查，如果在cache当中查不到，再到词典内查找，而因为词典库是很庞大的，时间复杂度太高了，所以需要对查询词建立索引，从索引中把查询词找到，找到之后跟关键字做一个比较，将与关键字相似度比较高的词返回客户端;如打开百度，在搜索时，用户输入几个关键字，会显示百度推荐的与之相近的且搜索频率高的关键字；

一.离线部分（创建词典的过程）
创建词典：以一定的格式将候选词文件保存起来map<string, int>存储词典-->保存为一个文件，存放在硬盘上;
创建索引文件：读取词典的时候使用vector<pair<string, int>> 存储词典；然后map<string, set<int>>，其中string存储单个字母或者中文字，set<int>存储包含该单个字母的在词典vector中的下标（可能会出现多次，处理冗余信息的方式：为了提高效率我们可以将查找过的下标放入一个set中，下一次遇到这些下标直接忽略），将用户搜索的关键字与map相匹配，找到最相似的
二.在线部分（对客户端提供服务的过程）
读取第一阶段建立的词典和索引文件作为输入，将客户端传递过来的查询词封装成一个任务进行处理，最后将处理好的结果结果直接发送给客户端;
三.业务逻辑
获取到客户端传递过来的查询词之后，再从索引之中查找与之相近的候选词，选取到最合适的候选词之后再将其发给客户端。
候选词的选取包括以下几个部分：
实现最小编辑距离核心算法（将a单词变为b单词需要编辑多少次，通过修改删除替换） ---- 计算候选词与查询词的相似度
候选词选择策略：
a.优先比较最小编辑距离；
b.在编辑距离相同的条件下，再比较候选词的词频；
c.在词频相同的条件下，按字母表顺序比较候选词；
获取k个（例如3个）候选词，返回给客户端。（需要使用优先级队列，堆）

并发服务器采用Reactor+Threapool，即反应器加线程池模式
Reactor所在的线程称为IO线程， 只负责数据的接收和发送；
Threadpool所在的线程称为计算线程，负责数据的处理，即完成客户需求的业务逻辑；
